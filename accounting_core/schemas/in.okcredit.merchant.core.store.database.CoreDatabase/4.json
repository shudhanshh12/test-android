{
  "formatVersion": 1,
  "database": {
    "version": 4,
    "identityHash": "a12d70cf3eeccd1512ddc596ec944c28",
    "entities": [
      {
        "tableName": "Transaction",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `type` INTEGER NOT NULL, `customerId` TEXT NOT NULL, `amount` INTEGER NOT NULL, `collectionId` TEXT, `images` TEXT, `note` TEXT, `createdAt` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `deleteTime` INTEGER, `isDirty` INTEGER NOT NULL, `billDate` INTEGER NOT NULL, `updatedAt` INTEGER NOT NULL, `smsSent` INTEGER NOT NULL, `createdByCustomer` INTEGER NOT NULL, `deletedByCustomer` INTEGER NOT NULL, `inputType` TEXT, `voiceId` TEXT, `state` INTEGER NOT NULL, `category` INTEGER NOT NULL, `amountUpdated` INTEGER NOT NULL, `amountUpdatedAt` INTEGER, PRIMARY KEY(`id`))",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "customerId",
            "columnName": "customerId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "amount",
            "columnName": "amount",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "collectionId",
            "columnName": "collectionId",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "images",
            "columnName": "images",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "note",
            "columnName": "note",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "createdAt",
            "columnName": "createdAt",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isDeleted",
            "columnName": "isDeleted",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "deleteTime",
            "columnName": "deleteTime",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "isDirty",
            "columnName": "isDirty",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "billDate",
            "columnName": "billDate",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "smsSent",
            "columnName": "smsSent",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "createdByCustomer",
            "columnName": "createdByCustomer",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "deletedByCustomer",
            "columnName": "deletedByCustomer",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "inputType",
            "columnName": "inputType",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "voiceId",
            "columnName": "voiceId",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "category",
            "columnName": "category",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "amountUpdated",
            "columnName": "amountUpdated",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "amountUpdatedAt",
            "columnName": "amountUpdatedAt",
            "affinity": "INTEGER",
            "notNull": false
          }
        ],
        "primaryKey": {
          "columnNames": [
            "id"
          ],
          "autoGenerate": false
        },
        "indices": [],
        "foreignKeys": []
      },
      {
        "tableName": "Command",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `type` INTEGER NOT NULL, `value` TEXT NOT NULL, `timestamp` INTEGER NOT NULL, `transactionId` TEXT NOT NULL, PRIMARY KEY(`id`))",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "value",
            "columnName": "value",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "timestamp",
            "columnName": "timestamp",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "transactionId",
            "columnName": "transactionId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "id"
          ],
          "autoGenerate": false
        },
        "indices": [],
        "foreignKeys": []
      },
      {
        "tableName": "Customer",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `status` INTEGER NOT NULL, `mobile` TEXT, `description` TEXT NOT NULL, `createdAt` INTEGER NOT NULL, `txnStartTime` INTEGER, `accountUrl` TEXT, `balance` INTEGER NOT NULL, `transactionCount` INTEGER NOT NULL, `lastActivity` INTEGER, `lastPayment` INTEGER, `profileImage` TEXT, `address` TEXT, `email` TEXT, `newActivityCount` INTEGER NOT NULL, `addTransactionRestricted` INTEGER NOT NULL, `registered` INTEGER NOT NULL, `lastBillDate` INTEGER, `txnAlertEnabled` INTEGER NOT NULL, `lang` TEXT, `reminderMode` TEXT, `isLiveSales` INTEGER NOT NULL, `lastViewTime` INTEGER, `blockedByCustomer` INTEGER NOT NULL, `state` INTEGER NOT NULL, `restrictContactSync` INTEGER NOT NULL, PRIMARY KEY(`id`))",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "status",
            "columnName": "status",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "mobile",
            "columnName": "mobile",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "description",
            "columnName": "description",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createdAt",
            "columnName": "createdAt",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "txnStartTime",
            "columnName": "txnStartTime",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "accountUrl",
            "columnName": "accountUrl",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "balance",
            "columnName": "balance",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "transactionCount",
            "columnName": "transactionCount",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "lastActivity",
            "columnName": "lastActivity",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "lastPayment",
            "columnName": "lastPayment",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "profileImage",
            "columnName": "profileImage",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "address",
            "columnName": "address",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "newActivityCount",
            "columnName": "newActivityCount",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "addTransactionRestricted",
            "columnName": "addTransactionRestricted",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "registered",
            "columnName": "registered",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "lastBillDate",
            "columnName": "lastBillDate",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "txnAlertEnabled",
            "columnName": "txnAlertEnabled",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "lang",
            "columnName": "lang",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "reminderMode",
            "columnName": "reminderMode",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "isLiveSales",
            "columnName": "isLiveSales",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "lastViewTime",
            "columnName": "lastViewTime",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "blockedByCustomer",
            "columnName": "blockedByCustomer",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "restrictContactSync",
            "columnName": "restrictContactSync",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "id"
          ],
          "autoGenerate": false
        },
        "indices": [],
        "foreignKeys": []
      },
      {
        "tableName": "SuggestedCustomerIdsForAddTransaction",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, PRIMARY KEY(`id`))",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "id"
          ],
          "autoGenerate": false
        },
        "indices": [],
        "foreignKeys": []
      }
    ],
    "views": [
      {
        "viewName": "CustomerWithTransactionsInfo",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT\n            Customer.id,\n            Customer.status,\n            Customer.mobile,\n            Customer.description,\n            Customer.createdAt,\n            agg.balance as balance,\n            agg.transactionCount as transactionCount,\n            agg.lastActivity as lastActivity,\n            agg.lastPayment as lastPayment,\n            Customer.accountUrl,\n            Customer.profileImage,\n            Customer.address,\n            Customer.email,\n            MAX(`Transaction`.billDate ) as lastBillDate,\n            agg.newActivityCount as newActivityCount,\n            Customer.lastViewTime,\n            Customer.registered,\n            Customer.txnAlertEnabled,\n            Customer.lang,\n            Customer.reminderMode,\n            Customer.txnStartTime,\n            Customer.isLiveSales,\n            Customer.addTransactionRestricted,\n            Customer.blockedByCustomer,\n            Customer.state,\n            Customer.restrictContactSync,\n            MAX(Case when `Transaction`.isdeleted ==1 then (case when `Transaction`.type==1 then 0  when `Transaction`.category==1 then 6 else 1 end) when `Transaction`.isdeleted == 0 then (case  when `Transaction`.amountUpdated==1 then (case  when `Transaction`.type==1 then 8 else 9 end)  when `Transaction`.type==1 then 2 when `Transaction`.state == 0 then 5 when `Transaction`.category==1 then 7 else 3 end) else 4 end) as lastActivityMetaInfo,\n            `Transaction`.amount as lastAmount\n        FROM Customer\n        LEFT OUTER JOIN `Transaction` ON Customer.id = `Transaction`.customerId\n        LEFT JOIN (\n            SELECT\n                    Customer.id     as id,\n                    SUM(CASE WHEN `Transaction`.isDeleted == 1 THEN 0 WHEN `Transaction`.state == 0 THEN 0 WHEN `Transaction`.type == 1 THEN -1 * `Transaction`.amount ELSE `Transaction`.amount END) as balance,\n                    SUM(CASE WHEN `Transaction`.isDeleted == 1 THEN 0 ELSE 1 END) as transactionCount,\n                    MAX(CASE WHEN `Transaction`.isDeleted == 1 THEN `Transaction`.deleteTime WHEN `Transaction`.createdAt >= Customer.createdAt THEN (case when `Transaction`.amountUpdatedAt >= `Transaction`.createdAt then `Transaction`.amountUpdatedAt else `Transaction`.createdAt end) ELSE Customer.createdAt END) as lastActivity,\n                    MAX(CASE WHEN `Transaction`.isDeleted == 1 THEN 0 WHEN `Transaction`.type == 1 THEN 0 ELSE `Transaction`.createdAt END) as lastPayment,\n                    MAX(`Transaction`.billDate) as lastBillDate,\n                    SUM(CASE WHEN Customer.lastViewTime == 0 THEN 0 WHEN `Transaction`.updatedAt > Customer.lastViewTime AND `Transaction`.createdByCustomer == 1  THEN 1 ELSE 0 END) as newActivityCount\n                FROM Customer\n                LEFT OUTER JOIN `Transaction` ON Customer.id = `Transaction`.customerId\n                GROUP BY Customer.id) as agg on agg.id=Customer.id\n        where (`Transaction`.deleteTime==agg.lastactivity) or (`Transaction`.createdAt==agg.lastactivity) or (customer.createdAt==agg.lastactivity) or (`Transaction`.amountUpdatedAt==agg.lastactivity)\n        group by customer.id"
      }
    ],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'a12d70cf3eeccd1512ddc596ec944c28')"
    ]
  }
}